# -*- mode: shell-script -*-
# vim:ft=zsh:sw=4:sts=4:et

# Started from Zle or from command line
#
# Copyright (c) 2018 Sebastian Gniazdowski

-zui_std_cleanup deserialize:"zi-console"
-zui_std_init app:"zi-console" app_name:"ZI Console"
emulate -LR zsh -o extendedglob -o typesetsilent -o warncreateglobal -o noshortloops -o rcquotes
-zui_std_init2

zmodload zsh/curses &>/dev/null || {
    print "ERROR: no zsh/curses module available."
    print "You can build the module yourself by following the instructions at:"
    print "https://github.com/z-shell/zi-console#solving-the-lack-of-zshcurses-module-with-zi"
    return 1
}

# Don't leak any functions
typeset -g ziconsole_ef
ziconsole_ef=( ${(k)functions} )
trap "unset -f -- \"\${(k)functions[@]:|ziconsole_ef}\" &>/dev/null; unset ziconsole_ef" EXIT
trap "unset -f -- \"\${(k)functions[@]:|ziconsole_ef}\" &>/dev/null; unset ziconsole_ef; return 1" INT

-zui_std_store_default_app_config b:text_mode off
-zui_std_store_default_app_config b:text_select off
-zui_std_store_default_app_config b:border 1
-zui_std_store_default_app_config b:top_anchors 0  # no top-anchors
-zui_std_store_default_app_config s:status_size 3  # no top-anchors

# Debug array, for debug view
local -a ZCR_DEBUG_MSGS

# Append message to the debug view
/ziconsole-dbg-msg() { ZCR_DEBUG_MSGS+=( "$*" ); }
# Append multiple messages to the debug view
/ziconsole-dbg-msg-arr() { ZCR_DEBUG_MSGS+=( "$@" ); }

ZUI[log_time_format]="[%H:%M] "

# Initial debug message
/ziconsole-dbg-msg "ZSH version: $ZSH_VERSION ($ZSH_PATCHLEVEL), machine: $CPUTYPE $VENDOR $OSTYPE, LANG: $LANG"
if [[ ${+ZI} = 1 ]]; then
    /ziconsole-dbg-msg "ZI version: <ZIVERSION>, ZI-Crasis version: <ZCRVERSION>"
    /ziconsole-dbg-msg "ZI BIN_DIR: ${ZI[BIN_DIR]/$HOME/~}, HOME_DIR: ${ZI[HOME_DIR]/$HOME/~}, PLUGINS_DIR: ${ZI[PLUGINS_DIR]/$HOME/~}, COMPLETIONS_DIR: ${ZI[COMPLETIONS_DIR]/$HOME/~}"
else
    /ziconsole-dbg-msg "${ZUI[RED]}ZI not loaded${ZUI[FMT_END]}"
fi

/ziconsole-dbg-msg ""
/ziconsole-dbg-msg-arr "Active plugins:" "${ZI_REGISTERED_PLUGINS[@]/(#s)/ }"
/ziconsole-dbg-msg ""

#
# CONSTANTS
#

local -a ice_order nval_ices
ice_order=(
    svn proto from bindmap cloneopts id-as depth if wait load
    unload blockf pick bpick src as ver silent lucid notify mv cp
    atinit atclone atload atpull nocd run-atpull has cloneonly make
    service trackbinds multisrc compile nocompile nocompletions
    reset-prompt wrap-track reset sh \!sh bash \!bash ksh \!ksh csh
    \!csh aliases
    # Include all additional ices â€“ after
    # stripping them from the possible: ''
    ${(@s.|.)${ZI_EXTS[ice-mods]//\'\'/}}
)
nval_ices=(
        blockf silent lucid trackbinds cloneonly nocd run-atpull
        nocompletions sh \!sh bash \!bash ksh \!ksh csh \!csh
        aliases

        # Include only those additional ices,
        # don't have the '' in their name, i.e.
        # aren't designed to hold value
        ${(@)${(@s.|.)ZI_EXTS[ice-mods]}:#*\'\'*}

        # Must be last
        svn
)

# Layout parameters
local -a w_snippet_item_long w_snippet_item_short w_plugin_item_long w_plugin_item_short
local -a w_cdreplay_item_long w_cdreplay_item_short w_cdclear_item_long w_cdclear_item_short
local -a w_other_item_long w_other_item_short

#
# PARAMETERS
#

# Common
local -a mbegin mend match
local MATCH; integer MBEGIN MEND
local internal # to mark inline action as no-ZUI-restart
local tmp
typeset -g REPLY
typeset -ga reply

#
# Load and process theme
#

local ZICONSOLE_THEME="$ZICONSOLE_THEME" ZICONSOLE_LAYOUT="$ZICONSOLE_LAYOUT"

local -a thcol_entries thcol_entries2 thbcol_entries thtxt_entries thtxt_entries2
thcol_entries=(
    # Top bar
    menu-active-button-fg menu2-active-button-fg
    options debug delete-mode edit-mode compact-mode
    # Listing
    index loaded unloaded up down delete ice-list minus-ice load-time ms
    # Snippet item
    s-url s-marker s-marker-unloaded s-as-command s-force
    # Plugin item
    p-id p-marker p-marker-unloaded p-compile
    # Ice listing
    i-indent i-unknown
    # Preview
    pv-main-buttons pv-comment
    # Options view
    o-theme-box o-switch o-layout-box o-switch2 o-save
    # Debug view
    d-save
)

thcol_entries2=( p-mode i-id d-email )

thbcol_entries=( menu-bg menu-active-button-bg menu2-bg menu2-active-button-bg )

thtxt_entries=(
    # Top bar
    options-text debug-text delete-mode-text edit-mode-text compact-mode-text
    # Listing
    loaded-text unloaded-text loaded-unicode unloaded-unicode up-text down-text up-unicode down-unicode
    delete-text delete-unicode minus-ice-text ice-list-text
    # Snippet item
    s-marker-text s-marker-unloaded-text
    # Plugin item
    p-marker-text p-marker-unloaded-text p-compile-text
    # Ice listing
    i-indent-text i-blockf-text i-unknown-text
    # Options view
    o-switch-text o-switch2-text o-save-text
    # Debug view
    d-save-text
)

thtxt_entries2=( p-mode-text )

local -A theme

# FUNCTION: .ziconsole-process-theme {{{
# Theme file contains a little complex data and
# this functions converts it to be ready to use
function .ziconsole-process-theme() {
    typeset -F 3 SECONDS=0

    local -A theme_save
    theme_save=( "${(kv@)theme[(I)*-unicode-bool]}" )

    [[ -f "$Plugins[ZICONSOLE_REPO_DIR]/ziconsole.conf" ]] && {
        source "$Plugins[ZICONSOLE_REPO_DIR]/ziconsole.conf"
        # Global and from-interface $ZICONSOLE_THEME overrides configuration file
        ZICONSOLE_THEME=${ZICONSOLE_THEME:-$theme_name}
        ZICONSOLE_LAYOUT=${ZICONSOLE_LAYOUT:-$layout_name}
        # For unicode glyphs, respect configuration file only at start
        theme_save[lu-unicode-bool]="${theme_save[lu-unicode-bool]:-$toggle_unicode_buttons}"
        theme_save[delete-unicode-bool]="${theme_save[delete-unicode-bool]:-$delete_unicode_button}"
    }

    theme=( "${(kv@)theme_save}" )

    # Mostly initial values, but also error check
    [[ "${theme[lu-unicode-bool]}" != [0-1] ]] && theme[lu-unicode-bool]=1
    [[ "${theme[delete-unicode-bool]}" != [0-1] ]] && theme[delete-unicode-bool]=1

    # Fallback path for theme name
    [[ ! -f "$Plugins[ZICONSOLE_REPO_DIR]/themes/${ZICONSOLE_THEME}.cr-theme" ]] && {
        -zui_std_stalog "No such theme: " "$ZICONSOLE_THEME," "" " reverted to default"
        ZICONSOLE_THEME="default"

        [[ ! -f "$Plugins[ZICONSOLE_REPO_DIR]/themes/${ZICONSOLE_THEME}.cr-theme" ]] && {
            print "Couldn't find theme \`$ZICONSOLE_THEME', have to abort.."
            print "Looked for file: $Plugins[ZICONSOLE_REPO_DIR]/themes/${ZICONSOLE_THEME}.cr-theme"
            return 1
        }
    }

    source "$Plugins[ZICONSOLE_REPO_DIR]/themes/${ZICONSOLE_THEME}.cr-theme"
    theme+=( "${(kv)my_ziconsole_theme_data[@]}" )
    theme[i-blockf]="${${(s;:;)theme[i-id]}[5]}"
    theme[layout]="$(<$Plugins[ZICONSOLE_REPO_DIR]/layouts/$ZICONSOLE_LAYOUT.cr-layout)"

    # Stats on color settings
    local -a provided missing
    provided=( "${(@)theme[(I)(${(~j:|:)thcol_entries})]}" "${(@)theme[(I)(${(~j:|:)thcol_entries2})]}" )
    missing=( ${thcol_entries:|provided} ${thcol_entries2:|provided} )
    /ziconsole-dbg-msg "Theme provided ${#provided} color entries (out of $(( ${#thcol_entries} + ${#thcol_entries2} )) required, missing keys: ${missing:-none})"

    # Stats on text settings
    provided=( "${(@)theme[(I)(${(~j:|:)thtxt_entries})]}" "${(@)theme[(I)(${(~j:|:)thtxt_entries2})]}" )
    missing=( ${thtxt_entries:|provided} ${thtxt_entries2:|provided} )
    /ziconsole-dbg-msg "Theme provided ${#provided} text entries (out of $(( ${#thtxt_entries} + ${#thtxt_entries2} )) required, missing keys: ${missing:-none})"

    # Convert colors' symbolic names like "green"
    local ckey cval nval
    for ckey in "${thcol_entries[@]}" "${thbcol_entries[@]}" i-blockf; do
        cval=${(U)theme[$ckey]}
        [[ -z "$cval" ]] && continue

        [[ -n "${thbcol_entries[(r)$ckey]}" ]] && nval=${ZUI[BG_$cval]} || nval=${ZUI[$cval]}

        if [[ -n "$nval" ]]; then
            theme[$ckey]="$nval"
        else
            cval="${cval#B}"
            [[ -n "${thbcol_entries[(r)$ckey]}" ]] && nval=${ZUI[BG_$cval]} || nval=${ZUI[$cval]}
            [[ -n "$nval" ]] && theme[$ckey]="${ZUI[BOLD]}$nval" || theme[$ckey]=""
        fi
    done

    # Convert array-colors specifications
    local mkey
    local -a thsplit
    integer index
    for mkey in "${thcol_entries2[@]}"; do
        thsplit=( "${(@Us;:;)theme[$mkey]}" )
        index=0
        for cval in "${thsplit[@]}"; do
            index+=1
            nval=${ZUI[$cval]}

            if [[ -n "$nval" ]]; then
                theme[${mkey}-${index}]="$nval"
            else
                cval="${cval#B}"
                nval="${ZUI[$cval]}"
                [[ -n "$nval" ]] && theme[${mkey}-${index}]="${ZUI[BOLD]}$nval" || theme[${mkey}-${index}]=""
            fi
        done
    done

    # Convert non-semicolon texts to colored ones
    local tkey tval
    for tkey in "${thtxt_entries[@]}"; do
        tval="${theme[$tkey]}"

        # %s conversion
        if [[ "${tval/\%s*,/}" != "$tval" ]]; then
            thsplit=( "${(@s:,:)tval}" )

            cval="${theme[${tkey%(-text|-unicode)}]}"
            if [[ -n "$cval" ]]; then
                [[ -n "${thsplit[2]}" ]] && thsplit[2]="${cval}${thsplit[2]}${ZUI[FMT_END]}"
                [[ -n "${thsplit[3]}" ]] && thsplit[3]="${cval}${thsplit[3]}${ZUI[FMT_END]}"
            fi

            tval=`printf "${thsplit[@]}"`
            theme[${tkey}-c]="$tval"
        else
            cval="${theme[${tkey%(-text|-unicode)}]}"
            if [[ -n "$cval" ]]; then
                [[ -n "$tval" ]] && theme[${tkey}-c]="${cval}$tval${ZUI[FMT_END]}"
            else
                [[ -n "$tval" ]] && theme[${tkey}-c]="$tval"
            fi
        fi
    done

    # Convert semicolon texts to colored ones
    local -a thsplit2
    for mkey in "${thtxt_entries2[@]}"; do
        thsplit=( "${(@s:;:)theme[$mkey]}" )

        index=0
        for tval in "${thsplit[@]}"; do
            index+=1
            # %s conversion
            if [[ "${tval/\%s*,/}" != "$tval" ]]; then
                thsplit=( "${(@s:,:)tval}" )

                cval="${theme[${mkey%(-text|-unicode)}-${index}]}"
                if [[ -n "$cval" ]]; then
                    [[ -n "${thsplit[2]}" ]] && thsplit[2]="${cval}${thsplit[2]}${ZUI[FMT_END]}"
                    [[ -n "${thsplit[3]}" ]] && thsplit[3]="${cval}${thsplit[3]}${ZUI[FMT_END]}"
                fi

                tval=`printf "${thsplit[@]}"`
                theme[${mkey}-c-${index}]="$tval"
            else
                cval="${theme[${mkey%(-text|-unicode)}-${index}]}"
                if [[ -n "$cval" ]]; then
                    theme[${mkey}-c-${index}]="${cval}$tval${ZUI[FMT_END]}"
                else
                    theme[${mkey}-c-${index}]="$tval"
                fi
            fi
        done
    done

    [[ -n "$theme[i-unknown]" ]] && {
        theme[i-unknown-text-c]="${theme[i-unknown-text]//\%s/${theme[i-unknown]}%s$ZUI[FMT_END]}"
    } || theme[i-unknown-text-c]="$theme[i-unknown-text]"

    /ziconsole-dbg-msg-arr "Theme processing time: $SECONDS seconds" ""
    -zui_std_stalog "Loaded theme \`$ZICONSOLE_THEME' and layout \`$ZICONSOLE_LAYOUT'"

    return 0
}
# }}}
# FUNCTION: .ziconsole-set-zui-settings {{{
# If theme provides palette-string, it is
# applied to ZUI settings of this application
function .ziconsole-set-zui-settings() {
    [[ -n "$theme[palette-string]" ]] && {
        autoload is-at-least
        if [[ "$theme[palette-string]" = *[[:digit:]]* ]] && ! is-at-least 5.3; then
            -zui_std_stalog "256-color palette needs " "Zsh >= 5.3, " "" "it hasn't been applied"
        else
            ZUI[palette]="$theme[palette-string]"
        fi
    }
    [[ -n "$theme[logs-palette-string]" ]] && {
        autoload is-at-least
        if [[ "$theme[logs-palette-string]" = *[[:digit:]]* ]] && ! is-at-least 5.3; then
            -zui_std_stalog "256-color logs palette needs " "Zsh >= 5.3, " "" "it hasn't been applied"
        else
            ZUI[log_colors]="${theme[logs-palette-string]//:/ }"
        fi
    }
    [[ -n "$theme[colorpair-string]" ]] && {
        autoload is-at-least
        if [[ "$theme[colorpair-string]" = *[[:digit:]]* ]] && ! is-at-least 5.3; then
            -zui_std_stalog "256-colors need " "Zsh >= 5.3, " "" "color was skipped"
        else
            ZUI[colorpair]="${theme[colorpair-string]}"
        fi
    }
    [[ -n "$theme[status-cp-string]" ]] && {
        autoload is-at-least
        if [[ "$theme[status-cp-string]" = *[[:digit:]]* ]] && ! is-at-least 5.3; then
            -zui_std_stalog "256-colors need " "Zsh >= 5.3, " "" "color was skipped"
        else
            ZUI[status_colorpair]="${theme[status-cp-string]}"
        fi
    }
    [[ -n "$theme[mark]}" ]] && ZUI[mark]="$theme[mark]"
    [[ -n "$theme[mark2]}" ]] && ZUI[mark2]="$theme[mark2]"
    [[ -n "$theme[altmark]}" ]] && ZUI[altmark]="$theme[altmark]"
    [[ -n "$theme[altmark2]}" ]] && ZUI[altmark2]="$theme[altmark2]"
}
# }}}
# FUNCTION: .ziconsole-switch-theme {{{
# Switches theme during operation of Crasis (not
# at startup).
#
# $1 - theme name (not path, no .cr-theme extension)
.ziconsole-switch-theme() {
    -zui_std_strip_color_codes "$1"
    ZICONSOLE_THEME="$REPLY"
    .ziconsole-process-theme
    .ziconsole-set-zui-settings
}
# }}}
# FUNCTION: .ziconsole-switch-layout {{{
# Switches layout during operation of Crasis (not
# at startup).
#
# $1 - layout name (not path, no .cr-theme extension)
.ziconsole-switch-layout() {
    -zui_std_strip_color_codes "$1"
    ZICONSOLE_LAYOUT="$REPLY"
    .ziconsole-process-theme
    .ziconsole-set-zui-settings
}
# }}}
# FUNCTION: .ziconsole-action-save-options {{{
# Stores current settings to $Plugins[ZICONSOLE_REPO_DIR]/ziconsole.conf.
# Outputs status message.
.ziconsole-action-save-options() {
    local out="$Plugins[ZICONSOLE_REPO_DIR]/ziconsole.conf"
    print -r -- "local theme_name=${ZICONSOLE_THEME}   # Name of active theme. \$ZICONSOLE_THEME overrides." >| "$out"
    print -r -- "local layout_name=${ZICONSOLE_LAYOUT}  # Name of active layout. \$ZICONSOLE_LAYOUT overrides." >>| "$out"
    print -r -- "local toggle_unicode_buttons=${theme[lu-unicode-bool]} # Use unicode glyphs for enable & disable buttons?" >>| "$out"
    print -r -- "local delete_unicode_button=${theme[delete-unicode-bool]}  # Use unicode glyphs for disable button?" >>| "$out"
    -zui_std_stalog "Configuration saved to: " "$out"
}
# }}}

.ziconsole-process-theme || return 1
.ziconsole-set-zui-settings

# FUNCTION: .ziconsole-action-options-view {{{
# Enters or leaves options alternate-view. It basically
# sets option module's instance to be created, once (when
# entering) - by changing the module factor.
.ziconsole-action-options-view() {
    -zui_std_set_mod_factor 3 0 # debug view
    ZUI[my_in_debug]=0
    if [[ "${ZUI[my_in_options]}" != 1 ]]; then
        -zui_std_set_mod_factor 2 0 # plugin list
        -zui_std_set_mod_factor 4 1 # options
        ZUI[my_in_options]=1
        ZUI[COLORING_PATTERN]=''
    else
        -zui_std_set_mod_factor 2 ${#ENTRIES}
        -zui_std_set_mod_factor 4 0
        ZUI[my_in_options]=0
    fi

    if (( ZUI[my_in_options] == 0 )); then
        # Regenerate all modules with active instances - it will be mod1 and mod2
        reply=( ",all," "" )
    else
        # Regenerate menu and options module
        reply=( ",mod1_ice1,mod4_ice1," "" )
    fi
}
# }}}
# FUNCTION: .ziconsole-action-debug-view {{{
# Enters or leaves debug view. Plugin-list view is muted
# by setting module 2 factor to 0 -Â factor is the number
# of instances of a module to create, i.e. number of calls
# to module's generator. Debug module (#4) obtains factor 1.
# On disable, normal factors are restored.
.ziconsole-action-debug-view() {
    -zui_std_set_mod_factor 4 0
    ZUI[my_in_options]=0

    if [[ "${ZUI[my_in_debug]}" != 1 ]]; then
        -zui_std_set_mod_factor 2 0
        -zui_std_set_mod_factor 3 1
        ZUI[my_in_debug]=1
        ZUI[COLORING_PATTERN]=''

        ZCR_DEBUG_MSGS=( "${ZCR_DEBUG_MSGS[@]/<ZSHRCSIZE>/$(( ${#zshrc} - 5 ))}" )
        local -a lines
        lines=( "${(f@)zshrc}" )
        ZCR_DEBUG_MSGS=( "${ZCR_DEBUG_MSGS[@]/<ZSHRCLINES>/${#lines}}" )

        { local ver="$(<${ZI[BIN_DIR]}/.git/refs/heads/main)" } 2>/dev/null
        [[ -z "$ver" ]] && ver="unknown (no .git/refs/heads/main)" || ver="${ver[1,7]}"
        ZCR_DEBUG_MSGS=( "${ZCR_DEBUG_MSGS[@]/<ZIVERSION>/$ver}" )

        { local ver="$(<${ZI[PLUGINS_DIR]}/z-shell---zi-console/.git/refs/heads/main)" } 2>/dev/null
        [[ -z "$ver" ]] && ver="unknown (no .git/refs/heads/main)" || ver="${ver[1,7]}"
        ZCR_DEBUG_MSGS=( "${ZCR_DEBUG_MSGS[@]/<ZCRVERSION>/$ver}" )
    else
        -zui_std_set_mod_factor 2 ${#ENTRIES}
        -zui_std_set_mod_factor 3 0
        ZUI[my_in_debug]=0
    fi

    if (( ZUI[my_in_debug] == 0 )); then
        # Regenerate all modules with active instances - it will be mod1 and mod2
        reply=( ",all," "" )
    else
        # Regenerate menu and debug module
        reply=( ",mod1_ice1,mod3_ice1," "" )
    fi
}
# }}}
# FUNCTION: .ziconsole-action-delete {{{
# Removes given plugin or snippet from disk
#
# $1 - widget id
# $2 - module's index
# $3 - module's instance index
.ziconsole-action-delete() {
    local id="$1" mod="$2" ice="$3"

    local entry="${ENTRIES[$ice]}" URL user plugin
    local id_as="${${entry#TIME_[0-9]##_}//---//}" teleid

    local -a tmp object_ices
    tmp=( "${(z@)ZI_SICE[$id_as]}" )
    (( ${#tmp[@]} > 1 && ${#tmp[@]} % 2 == 0 )) && object_ices=( "${(Q)tmp[@]}" )

    teleid="${object_ices[teleid]}"

    zi delete -y -q "$id_as"
    -zui_std_stalog "" "" "" "Deleted the plugin/snippet $id_as from the disk"

    reply=( "" "" )
}
# }}}
# FUNCTION: .ziconsole-action-delete-mode {{{
# Enables ability to delete entries - adds [X] button
# to each plugin, snippet, external command, etc. (main
# view).
.ziconsole-action-delete-mode() {
    if [[ -n "${ZUI[my_delete_mode]}" ]]; then
        (( ZUI[my_delete_mode] = 1 - ZUI[my_delete_mode] ))
    else
        ZUI[my_delete_mode]=1
    fi

    reply=( ",all," "" )
}
# }}}
# FUNCTION: .ziconsole-action-compact-mode {{{
# Switches the entry list to compact-mode. In this mode,
# only a single line per plugin/snippet/etc. is displayed.
.ziconsole-action-compact-mode() {
    if [[ -n "${ZUI[my_compact_mode]}" ]]; then
        (( ZUI[my_compact_mode] = (ZUI[my_compact_mode]+1) % 3 ))
    else
        ZUI[my_compact_mode]=1
    fi

    reply=( ",all," "" )
}
# }}}
# FUNCTION: .ziconsole-clear-visual-state {{{
# Clears generators' working variables to trigger refresh
# from backend, model-structures (like $ENTRIES).
.ziconsole-clear-visual-state() {
    integer i size=${#ENTRIES}
    local -a keys
    local k
    for (( i=1; i<=size+15; i++ )); do
        unset "ZUI[toggle_unld_2_${i}]"

        unset "ZUI[my_tfield2_${i}_width]"
        unset "ZUI[my_tfield2_${i}_start]"
        unset "ZUI[my_tfield2_${i}_data]"

        unset "ZUI[my_lbox2_2_${i}_width]"
        unset "ZUI[my_lbox2_2_${i}_idx]"
        unset "ZUI[my_lbox2_2_${i}_opts]"

        keys=( ${ZUI[(I)my_tfield2_${i}_*_width]}
            ${ZUI[(I)my_tfield2_${i}_*_start]}
            ${ZUI[(I)my_tfield2_${i}_*_data]} )

        for k in "${keys[@]}"; do
            unset "ZUI[$k]"
        done
    done
}
# }}}
# FUNCTION: .ziconsole-generator-0 {{{
# ZUI generator that creates top menu (its hypertext).
# The menu can differ depending on current view mode
# (normal, debug, options).
.ziconsole-generator-0() {
    local mod="$1" ice="$2"
    local pv_col op_col dg_col dl_col ed_col co_col
    local -a optional

    reply=()

    local act_fg_bg="$theme[menu-active-button-fg]$theme[menu-active-button-bg]"
    local act_fg_bg2="$theme[menu2-active-button-fg]$theme[menu2-active-button-bg]"

    -zui_util_map_bools '[[ ${ZUI[my_in_options]} = 1 ]]' op_col \
                                                "$act_fg_bg" \
                                                "$theme[options]$theme[menu-bg]"
    -zui_util_map_bools '[[ ${ZUI[my_in_debug]} = 1 ]]' dg_col \
                                                "$act_fg_bg" \
                                                "$theme[debug]$theme[menu-bg]"
    -zui_util_map_bools '[[ "${ZUI[my_delete_mode]}" = "1" ]]' dl_col \
                                                "$act_fg_bg2" \
                                                "$theme[delete-mode]$theme[menu2-bg]"
    -zui_util_map_bools '[[ "${ZUI[my_edit_mode]}" = "1" ]]' ed_col \
                                                "$act_fg_bg2" \
                                                "$theme[edit-mode]$theme[menu2-bg]"
    -zui_util_map_bools '[[ "${ZUI[my_compact_mode]}" = [12] ]]' co_col \
                                                "$act_fg_bg2" \
                                                "$theme[compact-mode]$theme[menu2-bg]"

    # 1. - 2.
    local close
    [[ -n "$theme[menu-bg]" || -n "$theme[reload]" ]] && close="${ZUI[FMT_END]}" || close=""
    -zui_std_button "options" "${op_col}$theme[options-text]${op_col:+${ZUI[FMT_END]}}" .ziconsole-action-options-view
    -zui_std_button "debug" "${dg_col}$theme[debug-text]${dg_col:+${ZUI[FMT_END]}}" .ziconsole-action-debug-view

    [[ -n "$theme[menu-bg]" ]] && local spc="$theme[menu-bg] ${ZUI[FMT_END]}" || local spc=" "

    (( ZUI[my_in_debug] + ZUI[my_in_options] == 0 )) && {
        # Variables of the list box
        (( ${+ZUI[my_lbox1_width]} == 0 )) && ZUI[my_lbox1_width]=$(( 25 < ${#chosen_plugins[1]} ? ${#chosen_plugins[1]} : 25 ))
        (( ${+ZUI[my_lbox1_idx]} == 0 )) && ZUI[my_lbox1_idx]=1
        (( ${+ZUI[my_lbox1_opts]} == 0 )) && ZUI[my_lbox1_opts]="${(j:;:)chosen_plugins}"

        # 3. - 4.
        (( ZUI[my_compact_mode] > 0 )) && {
            local cm_index="${ZUI[my_compact_mode]}"
            [[ "${${theme[compact-mode-text]}[-1]}" = " " ]] && cm_index+=" " || cm_index=" $cm_index"
        }
        -zui_std_button "delete_mode" "${dl_col}$theme[delete-mode-text]${dl_col:+${ZUI[FMT_END]}}" .ziconsole-action-delete-mode optional
        -zui_std_button "compact_mode" "${co_col}$theme[compact-mode-text]$cm_index${co_col:+${ZUI[FMT_END]}}" .ziconsole-action-compact-mode optional

        local line1="${optional[5]}$spc${optional[1]}$spc${optional[2]}"
        local line2=""
    } || {
        local line1="" line2=""
    }

    reply=(
        "${reply[1]}$spc${reply[2]}$spc${reply[3]}$spc${reply[4]}$spc${reply[5]}$spc$line1"
        $line2
    )

    # Non-selectable lines   Hops to jump with [ and ]   Local anchors  Spacing
    reply2=( )               reply3=( 1 )                reply4=( )     reply5="0"
}
# }}}
# FUNCTION: .ziconsole-generator-A {{{
# ZUI generator that creates document block for each plugin or snippet.
# This is module #2, each proper document block is an instance of this
# module.
.ziconsole-generator-A() {
    local mod="$1" ice="$2" arg="$3" t
    local -a cmd output
    local -A object_ices object_data
    local var_name1 var_name2
    local num smarker_text pmarker_text mode_text unloaded_text command_col force_col

    # Get n-th TIME_* element, n == instance number
    local entry="${ENTRIES[$ice]}" URL user plugin
    local id_as="${${entry#TIME_[0-9]##_}//---//}" teleid

    local -a tmp
    tmp=( "${(z@)ZI_SICE[$id_as]}" )
    (( ${#tmp[@]} > 1 && ${#tmp[@]} % 2 == 0 )) && object_ices=( "${(Q)tmp[@]}" )

    teleid="${object_ices[teleid]}"
    local w_load_time="${ZI[$entry]}"
    w_load_time="$theme[load-time]${(l:3:: :)$(( w_load_time * 1000 ))%.*}${ZUI[FMT_END]} $theme[ms]ms${ZUI[FMT_END]}"

    if [[ "$teleid" = (http|https|ftp|ftps|scp|OMZ|PZT):* ]]; then
        URL="$teleid"
        # Remove whitespace from beginning of URL
        URL="${${URL#"${URL%%[! $'\t']*}"}%/}"

        object_data=( tpe "snippet" arg "$id_as" teleid "$URL"  unloaded -1 )
    else
        .zi-any-to-user-plugin "$teleid"
        user="${reply[-2]}" plugin="${reply[-1]}"
        object_data=( tpe "plugin" arg "$id_as" teleid "$teleid"  unloaded 0 user "$user" plugin "$plugin" )
        (( !${ZI_REGISTERED_PLUGINS[(I)$id_as]} )) && object_data[unloaded]=1
    fi

    output=()
    reply=()

    # Number
    [[ -n "$theme[index]" ]] && num="$theme[index]${(l:2::0:)ice}${ZUI[FMT_END]}." || num="${(l:2::0:)ice}."

    #
    # 1. "Loaded" or "Unloaded"
    #

    (( theme[lu-unicode-bool] )) && local loaded="$theme[loaded-unicode-c]" || local loaded="$theme[loaded-text-c]"
    (( theme[lu-unicode-bool] )) && local unloaded="$theme[unloaded-unicode-c]" || local unloaded="$theme[unloaded-text-c]"

    [[ -z "${ZUI[toggle_unld_${mod}_${ice}]}" ]] && ZUI[toggle_unld_${mod}_${ice}]="${object_data[unloaded]:-0}"
    -zui_util_map_bools "[[ \"${object_data[unloaded]}\" = 1 ]]" "unloaded_text" "$unloaded" "$loaded"
    -zui_util_map_bools "[[ \"${object_data[unloaded]}\" = 1 ]]" "smarker_text" "$theme[s-marker-unloaded-text-c]" "$theme[s-marker-text-c]"
    -zui_util_map_bools "[[ \"${object_data[unloaded]}\" = 1 ]]" "pmarker_text" "$theme[p-marker-unloaded-text-c]" "$theme[p-marker-text-c]"

    -zui_util_map_bools "[[ \"${object_data[unloaded]}\" = -1 ]]" "unloaded_text" "   " "$unloaded_text"

    -zui_std_button "toggle_unld_${mod}_${ice}" "$unloaded_text" \
        "(( ${object_data[unloaded]} )) && {
                ZI_ICES=( ${(j: :)${(@qkv)object_ices[@]}} )
                unset 'ZI_ICES[wait]'
                zi load \"${object_data[arg]}\" &>/dev/null "'
                -zui_std_stalog "" "" "" "Loaded the plugin."
                ((1))
            } || {'"
                zi unload \"${object_data[arg]}\" &>/dev/null"'
                -zui_std_stalog "Unloaded the plugin." " It''s report stored into" "" " \$LASTREPORT"
            }'"
            -zui_std_fly_mod_regen \""$mod"\" \""$ice"\"; internal=1" \
        output

    #
    # 2. Delete
    #

    (( theme[delete-unicode-bool] )) && local delete="$theme[delete-unicode-c]" || local delete="$theme[delete-text-c]"
    -zui_std_button_ext "delete_${mod}_${ice}" "$mod" "$ice" "" "" "$delete" .ziconsole-action-delete output
    if (( ZUI[my_delete_mode] )); then
        output[2]+=" "
    else
        output[2]=""
    fi

    # Save for layout
    local w_unload="${output[1]}" w_delete="${output[2]}"

    #
    # 3. Enumerate ice modifiers in list-box
    #

    local -a ioutput
    local value cand1 cand2
    integer index=0
    # Something more than [c]=zi [sub]=ice [comment]=comment
    (( ${#object_ices} > 0 )) && {
        # TODO ioutput=( "${theme[i-indent-text-c]-    }" )
        for t in "${ice_order[@]}"; do
            index+=1
            case "$t" in
                (${(~j:|:)${ice_order:|nval_ices}})
                    [[ -z "${object_ices[$t]}" ]] && continue
                    value="${object_ices[$t]}"
                    cand1="${(qqq)value}"
                    cand2="${(qq)value}"
                    [[ "${cand1/\\\$/}" != "$cand1" || "${cand1/\\\!/}" != "$cand1" ]] && ioutput+=( "$t$cand2" ) || ioutput+=( "$t$cand1" )
                    ;;
                (${(~j:|:)nval_ices})
                    (( ${+object_ices[$t]} == 0 )) && continue
                    ioutput+=( "$t" )
                    ;;
            esac
        done

        [[ -n "$theme[ice-list]" ]] && t="$theme[ice-list-text-c]" || t="$theme[ice-list-text]"

        # Backend variables
        (( ${+ZUI[my_lbox2_${mod}_${ice}_idx]} == 0 )) && ZUI[my_lbox2_${mod}_${ice}_idx]=1
        ZUI[my_lbox2_${mod}_${ice}_width]="${#${(A@s:;:):-$t;${(j:;:)ioutput}}[${ZUI[my_lbox2_${mod}_${ice}_idx]}]}"
        ZUI[my_lbox2_${mod}_${ice}_opts]="$t;${(j:;:)ioutput}"

        noglob -zui_std_list_box "lbox2_${mod}_${ice}" ZUI[my_lbox2_${mod}_${ice}_width] ZUI[my_lbox2_${mod}_${ice}_idx] ZUI[my_lbox2_${mod}_${ice}_opts] "" "" "" '-zui_std_fly_mod_regen "'$mod'" "'$ice'"' output
        local w_ices_list="${output[-1]}"
    } || { output+=( "" ); local w_ices_list="{-}"; }

    if [[ "${object_data[tpe]}" = "snippet" ]]; then
        #
        # 4. Snippet url
        #

        noglob -zui_std_special_text "${(r:40:: :)object_data[arg]}" output
        [[ -n "$theme[s-url]" ]] && output[-1]="$theme[s-url]${output[-1]}${ZUI[FMT_END]}"

        #
        # The Resulting Document
        #

        local w_url="${output[4]}"

        eval "$theme[layout]"
        [[ "${ZUI[my_compact_mode]}" = [01] ]] && reply=( "${w_snippet_item_short[@]}" ) || reply=( "${w_snippet_item_long[@]}" )
    elif [[ "${object_data[tpe]}" = "plugin" ]]; then
        #
        # 4. Plugin ID
        #

        noglob -zui_std_special_text "${(r:40:: :)object_data[arg]}" output
        [[ -n "$theme[p-id]" ]] && output[-1]="$theme[p-id]${output[-1]}${ZUI[FMT_END]}"

        #
        # The Resulting Document
        #

        local w_plugin="${output[4]}"

        eval "$theme[layout]"
        [[ "${ZUI[my_compact_mode]}" = [01] ]] && reply=( "${w_plugin_item_short[@]}" ) || reply=( "${w_plugin_item_long[@]}" )
    fi

    # Instead of debugging ZUI, I've added '-1' here
    var_name1="my_mod${mod}_ice${ice}_size"
    : "${(P)var_name1::=${#reply}}"

    # Non-selectable lines   Hops to jump with [ and ]   Local anchors
    reply2=( )               reply3=( 1 )                reply4=( move_up_${mod}_${ice} move_down_${mod}_${ice} )

    # Module's spacing, the blank lines at top
    [[ "${ZUI[my_compact_mode]}" = "1" || "$ice" -eq 1 ]] && reply5="1" || reply5="0"
}
# }}}
# FUNCTION: .ziconsole-generator-OPT {{{
.ziconsole-generator-OPT() {
    local -a thms tnames layts lnames
    thms=( "$Plugins[ZICONSOLE_REPO_DIR]"/themes/*.cr-theme )
    tnames=( "${(o@)${thms[@]:t}%.cr-theme}" )
    layts=( "$Plugins[ZICONSOLE_REPO_DIR]"/layouts/*.cr-layout )
    lnames=( "${(o@)${layts[@]:t}%.cr-layout}" )

    reply=()

    # Switch theme list box
    (( ${+ZUI[my_lbox4_width]} == 0 )) && ZUI[my_lbox4_width]=18
    ZUI[my_lbox4_idx]=${tnames[(i)$ZICONSOLE_THEME]}
    eval "ZUI[my_lbox4_opts]=\"$theme[o-theme-box]\${(j:${ZUI[FMT_END]};${theme[o-theme-box]}:)tnames}${ZUI[FMT_END]}\""
    noglob -zui_std_list_box "lbox4_$mod" ZUI[my_lbox4_width] ZUI[my_lbox4_idx] ZUI[my_lbox4_opts] "" "" "" ''
    -zui_std_button "switch_theme" "$theme[o-switch-text-c]" 'ZUI[my_rerender]=1; .ziconsole-switch-theme "${${(s:;:)ZUI[my_lbox4_opts]}[${ZUI[my_lbox4_idx]}]}"; reply=( ",all," "" );'

    # Switch layout list box
    (( ${+ZUI[my_lbox8_width]} == 0 )) && ZUI[my_lbox8_width]=18
    ZUI[my_lbox8_idx]=${lnames[(i)$ZICONSOLE_LAYOUT]}
    eval "ZUI[my_lbox8_opts]=\"$theme[o-layout-box]\${(j:${ZUI[FMT_END]};${theme[o-layout-box]}:)lnames}${ZUI[FMT_END]}\""
    noglob -zui_std_list_box "lbox8_$mod" ZUI[my_lbox8_width] ZUI[my_lbox8_idx] ZUI[my_lbox8_opts] "" "" "" ''
    -zui_std_button "switch_layout" "$theme[o-switch2-text-c]" 'ZUI[my_rerender]=1; .ziconsole-switch-layout "${${(s:;:)ZUI[my_lbox8_opts]}[${ZUI[my_lbox8_idx]}]}"; reply=( ",all," "" );'

    # Enabled / Disabled list box
    (( ${+ZUI[my_lbox6_width]} == 0 )) && ZUI[my_lbox6_width]=22
    ZUI[my_lbox6_idx]=$(( theme[lu-unicode-bool] + 1 ))
    ZUI[my_lbox6_opts]="$theme[loaded-text-c]/$theme[unloaded-text-c];$theme[loaded-unicode-c]/$theme[unloaded-unicode-c]"

    noglob -zui_std_list_box "lbox6_$mod" ZUI[my_lbox6_width] ZUI[my_lbox6_idx] ZUI[my_lbox6_opts] "" "" "" 'ZUI[my_rerender]=1; theme[lu-unicode-bool]=$(( ZUI[my_lbox6_idx] - 1 ));'

    # Delete list box
    (( ${+ZUI[my_lbox7_width]} == 0 )) && ZUI[my_lbox7_width]=12
    ZUI[my_lbox7_idx]=$(( theme[delete-unicode-bool] + 1 ))
    ZUI[my_lbox7_opts]="$theme[delete-text-c];$theme[delete-unicode-c]"

    noglob -zui_std_list_box "lbox7_$mod" ZUI[my_lbox7_width] ZUI[my_lbox7_idx] ZUI[my_lbox7_opts] "" "" "" 'ZUI[my_rerender]=1; theme[delete-unicode-bool]=$(( ZUI[my_lbox7_idx] - 1 ));'

    # Save configuration button
    -zui_std_button "save_options" "$theme[o-save-text-c]" '.ziconsole-action-save-options; internal=1;'

    reply=(
        "Available themes: ${reply[1]} ${reply[2]}"
        ""
        "Available layouts: ${reply[3]} ${reply[4]}"
        ""
        "Buttons to load & unload plugins: ${reply[5]}"
        ""
        "Button to delete a plugin or snippet: ${reply[6]}"
        ""
        "${reply[7]}"
    )

    # Non-selectable lines   Hops to jump with [ and ]   Local anchors
    reply2=( 2 4 6 )         reply3=( 1 7 )              reply4=( )
}
# }}}
# FUNCTION: .ziconsole-generator-DBG {{{
# ZUI generator that creates debug-report text. This is module 4.
# There is 0 or 1 instance of this module, depending on chosen
# view.
.ziconsole-generator-DBG() {
    reply=()

    # Variables of the text field
    (( ${+ZUI[my_tfield1_width]} == 0 )) && ZUI[my_tfield1_width]=50
    (( ${+ZUI[my_tfield1_start]} == 0 )) && ZUI[my_tfield1_start]=1
    (( ${+ZUI[my_tfield1_data]} == 0 )) && ZUI[my_tfield1_data]="$HOME/ziconsole-report.txt"

    noglob -zui_std_text_field "report_path" ZUI[my_tfield1_width] ZUI[my_tfield1_start] ZUI[my_tfield1_data] "" "" "" ''
    -zui_std_button "save_report" "$theme[d-save-text-c]" 'print -rl -- "${ZCR_DEBUG_MSGS[@]}" >| "${ZUI[my_tfield1_data]}"; -zui_std_stalog "Report written to: " "\`${ZUI[my_tfield1_data]}'"'"'"; internal=1;'

    reply=( "Send reports to: $theme[d-email-1]psprint${ZUI[FMT_END]}$theme[d-email-2]@${ZUI[FMT_END]}$theme[d-email-3]z-shell.github.io${ZUI[FMT_END]}. Please include Zshrc if possible."
        ""
        "${reply[1]} ${reply[2]}"
        ""
        "${ZCR_DEBUG_MSGS[@]}"
    )

    # Non-selectable lines   Hops to jump with [ and ]   Local anchors
    reply2=( )               reply3=( 1 )                reply4=( )
}
# }}}

local -a ENTRIES
ENTRIES=( "${(@on)ZI[(I)TIME_[0-9]##_*]}" )

# Create needed local parameters
integer i
for (( i=1; i<=${#ENTRIES}+5; i++ )); do
    local my_mod2_ice${i}_size="0"
done

# Don't reset current segment on jump
ZUI[reset_current_segment]="no"

[[ -z "${ZUI[my_compact_mode]}" ]] && \
    ZUI[my_compact_mode]=0

## Start application ##
zui-event-loop 1:.ziconsole-generator-0 ${#ENTRIES}:.ziconsole-generator-A \
               0:.ziconsole-generator-DBG 0:.ziconsole-generator-OPT \
               cfg-refresh:palette,log_colors,colorpair,status_colorpair,log_time_format,mark,mark2,altmark,altmark2

-zui_std_cleanup serialize

# Remove:
# ud-unicode-bool
#
# up-unicode-c
# up-unicode
# up-text-c
#
# down-unicode-c
# down-unicode
# down-text-c
#
# lu-unicode-bool
# loaded-unicode
# loaded-unicode-c
# loaded-text-c
# unloaded-unicode ...

return 0
